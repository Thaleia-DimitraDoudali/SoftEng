How user registration works:

Sip Communicator:
	1. Main function runs from net.java.sip.communicator.SipCommunicator.java:
		launch() -> sipManager.startRegisterProcess();
	2. net.java.sip.communicator.sip.SipManager.java:
		startRegisterProcess() -> registrationState.getCredentials(realm, defaultCredentials);
		This is the point where we use the state design pattern. According to what the registrationState variable is, a different 
		getCredentials will be called.
	3. net.java.sip.communicator.sip.security:
		RegistrationState.java: this is the interface for the state design pattern -> getCredentials()
		RegisterAndLogin.java, OnlyLogin.java : these are the two classes that implement the above interface.
		OnlyLogin.java -> authority.obtainCredentials(realm, defaultValues);
		RegisterAndLogin.java -> getCredentials() -> authority.obtainCredentialsAndRegister();
	4. obtainCredentials() and obtainCredentialsAndRegister() are implemented in SipCommunicator.java:
		obtainCredentials(): does the login, but first checks if the user pressed the register button.
			if (guiManager.shouldRegister()) return authenticationSplash.shouldRegister;
				AythenticationSplash.java: basically, is the first window we see for the user authentication. If the user presses the register 
				button (which we added on the authenticationSplash), then shouldRegister = true;
		obtainCredentialsAndRegister(): does the registration.
			First, guiManager.requestRegistration(), it presents the registration window to the user which is implemented in RegistrationSplash.java 
			Then, it should add the user info to the database. But first, it checks if the username is taken and alerts the user (I did that myself, haha!)
	5. But how registrationState variable is set?
		SipCommunicator.java -> launch() -> sipManager.setSecurityAuthority(this) -> this.registrationState = new OnlyLogin(authority)
		So at the beginning the state of the registration is set to be only login.
		The only way to set the registrationState = RegisterAndLogin is through the proxy.

Proxy's side:
	gov.nist.sip.proxy.registrar.Registrar.java: dbManager.checkRegister(username)
		If username is already on database then register request returns NOT_FOUND. This response is handled by the sip communicator SipManager.java
		
SipCommunicator's side:
		SipManager.java: if (method.equals(Request.REGISTER)) 
							this.registrationState = new RegisterAndLogin(securityAuthority)
	
		
Check user registration:
	login of user existing in database: ok
	login of user not existing in database: registration window pops up
	register of user existing in database: alerts user that username is taken
	register of user not existing in database: ok
	
	
How Billing works (all is on the proxy's side):
	1. When registering a user now we also choose his billing plan (even if General we have to click on it to activate ActionListener)
	2. gov.nist.sip.proxy.Proxy.java: function Proxy(String confFile) creates the proxy. 
		There we create a new billing manager manageBilling = new ManageBilling()
		manageBilling.startBilling(request) when proxy receives an ACK
		manageBilling.stopBilling(request) when proxy receives BYE
	3. gov.nist.sip.proxy.billing.ManageBilling.java:
		startBilling():
			sip request header has certain fields, so we extract caller and callee from the headers, and we save them on the database.
			caller will be the one charged at the end. We set duration as -1 which indicates that this call has not ended yet.			
		stopBilling():
			we extract from the database the caller's record into a billing object, see what the current time is and calculate duration.
			About calculating the cost:
				We implement factory method design pattern for the different billing policies. 
				First, we have a BillingPolicy interface with a calculateCost function. 
				Then, we have three billing plans that implement that interface -> General, Student, FreeWeekends, calculating the cost accordingly.
				Finally, we have a billing policy factory that according to the plan returns the equivalent billing policy subclass.
				The whole point of a factory method is the following 3 commands on stopBilling:
					BillingPolicyFactory billFactory = new BillingPolicyFactory();
					BillingPolicy billPolicy = billFactory.getBillingPolicy(plan);
					double cost = billPolicy.calculateCost(duration);
				We now have calculated duration and cost and we update the relevant record on the database.
				
	
	
	
	
	
	
	
	
	
	
	
	
	