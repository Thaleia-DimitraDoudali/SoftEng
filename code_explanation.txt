How user registration works:

Sip Communicator:
	1. Main function runs from net.java.sip.communicator.SipCommunicator.java:
		launch() -> sipManager.startRegisterProcess();
	2. net.java.sip.communicator.sip.SipManager.java:
		startRegisterProcess() -> registrationState.getCredentials(realm, defaultCredentials);
		This is the point where we use the state design pattern. According to what the registrationState variable is, a different 
		getCredentials will be called.
	3. net.java.sip.communicator.sip.security:
		RegistrationState.java: this is the interface for the state design pattern -> getCredentials()
		RegisterAndLogin.java, OnlyLogin.java : these are the two classes that implement the above interface.
		OnlyLogin.java -> authority.obtainCredentials(realm, defaultValues);
		RegisterAndLogin.java -> getCredentials() -> authority.obtainCredentialsAndRegister();
	4. obtainCredentials() and obtainCredentialsAndRegister() are implemented in SipCommunicator.java:
		obtainCredentials(): does the login, but first checks if the user pressed the register button.
			if (guiManager.shouldRegister()) return authenticationSplash.shouldRegister;
				AythenticationSplash.java: basically, is the first window we see for the user authentication. If the user presses the register 
				button (which we added on the authenticationSplash), then shouldRegister = true;
		obtainCredentialsAndRegister(): does the registration.
			First, guiManager.requestRegistration(), it presents the registration window to the user which is implemented in RegistrationSplash.java 
			Then, it should add the user info to the database. But first, it checks if the username is taken and alerts the user (I did that myself, haha!)
	5. But how registrationState variable is set?
		SipCommunicator.java -> launch() -> sipManager.setSecurityAuthority(this) -> this.registrationState = new OnlyLogin(authority)
		So at the beginning the state of the registration is set to be only login.
		The only way to set the registrationState = RegisterAndLogin is through the proxy.

Proxy's side:
	gov.nist.sip.proxy.registrar.Registrar.java: dbManager.checkRegister(username)
		If username is already on database then register request returns NOT_FOUND. This response is handled by the sip communicator SipManager.java
		
SipCommunicator's side:
		SipManager.java: if (method.equals(Request.REGISTER)) 
							this.registrationState = new RegisterAndLogin(securityAuthority)
	
		
Check user registration:
	login of user existing in database: ok - Added password check!
	login of user not existing in database: registration window pops up
	register of user existing in database: alerts user that username is taken
	register of user not existing in database: ok
	
	
How Billing works (all is on the proxy's side):
	1. When registering a user now we also choose his billing plan (even if General we have to click on it to activate ActionListener)
	2. gov.nist.sip.proxy.Proxy.java: function Proxy(String confFile) creates the proxy. 
		There we create a new billing manager manageBilling = new ManageBilling()
		manageBilling.startBilling(request) when proxy receives an ACK
		manageBilling.stopBilling(request) when proxy receives BYE
	3. gov.nist.sip.proxy.billing.ManageBilling.java:
		startBilling():
			sip request header has certain fields, so we extract caller and callee from the headers, and we save them on the database.
			caller will be the one charged at the end. We set duration as -1 which indicates that this call has not ended yet.			
		stopBilling():
			we extract from the database the caller's record into a billing object, see what the current time is and calculate duration.
			About calculating the cost:
				We implement factory method design pattern for the different billing policies. 
				First, we have a BillingPolicy interface with a calculateCost function. 
				Then, we have three billing plans that implement that interface -> General, Student, FreeWeekends, calculating the cost accordingly.
				Finally, we have a billing policy factory that according to the plan returns the equivalent billing policy subclass.
				The whole point of a factory method is the following 3 commands on stopBilling:
					BillingPolicyFactory billFactory = new BillingPolicyFactory();
					BillingPolicy billPolicy = billFactory.getBillingPolicy(plan);
					double cost = billPolicy.calculateCost(duration);
				We now have calculated duration and cost and we update the relevant record on the database.
				
Forwarding:
	DB's side:
		Each user is allowed to forward his calls to only one user. That's why user is primary key.
		
	Proxy's side:
		Proxy should be the one that just checks the database when receiving a request.invite and forms the new call request to the forward user. It does that on Proxy.java
	gov.nist.sip.db.ForwardDB.java:
		getForward(caller): return the user to whom the call should be forwarded.
	gov.nist.sip.proxy.forwarding.ForwardingService.java:
		checkAndSetForwarding(Request request): dbManager.getForward(oldToUser): checks the database to see to whom the oldToUser wants to forward 
		the call. Then it creates the new Request, so that the call goes to the forward user and not to the original.
	gov.nist.sip.proxy.Proxy.java:
		This is where the forwarding is done!!
		the only code added is the one after the comment: //forwarding
		We get the new request from forwardingService and check if the forward user is blocked from the original caller
		
	Sip Communicator's side:

	net.java.sip.communicator.gui.PhoneFrame.java:
		puts the forward button on the phone frame
	net.java.sip.communicator.gui.GuiManager.java:
		forwardButton_actionPerformed: show forward splash
		handleGetForwardRequest();
		handleNewForwardRequest();
	net.java.sip.communicator.gui.event.UserActionListener:
		void handleGetForwardRequest()
		void handleNewForwardRequest() these are implemented on SipCommunicator.java
	net.java.sip.communicator.SipCommunicator.java:
		void handleGetForwardRequest():
			guiManager.setForwardTo(forwardClient.getForward(guiManager 	 	
					.getAuthenticationUserName()))
		void handleNewForwardRequest():
			forwardClient.setForward(fromUser, toUser);
			checks if user entered "", or invalid username, or circle by handling the exceptions
	net.java.sip.communicator.gui.ForwardSplash.java:
		sets the toUser string entered by the user on the forward window. 
	net.java.sip.communicator.forwarding.ForwardClient.java: 
		responsible for calling the forwardDB's functions.
	net.java.sip.communicator.db.ForwardDB.java:
		void resetForward(String user): deletes the user's forward entry 
		String getForward(String username): returns the forward_to user
		void setForward(String fromUser, String toUser):
			checks if the toUser exists on the database and throws NoSuchElementException in case no such user found
			checks if there is a forwarding circle and throws RuntimeException in case of a circle forwarding:
				We are using a HashSet, which is a set using a hash table for storage. We put in it the fromUser and toUser.
				We start from toUser and see to whom he forwards his calls. If this user is already on the set then a circle is created and 
				we throw exception, otherwise we add him to the set. 
					if (!userSet.add(forward_to))
						throw new RuntimeException();
				If added to the set we continue with this user as a fromUser to see to whom he forwards his calls, etc.
				In this way, we find each possible circle. BONUS!!!
			When the toUser has no forwarding entry we move on to setting the database entry for forwarding, by deleting the old one.
	
Blocking:

	Proxy's side:
		Proxy should check the DB when receiving a request.invite to see if the caller has been blocked by the callee, and return busy response to caller
	gov.nist.sip.db.BlockDB.java:
		getBlock(String blocked, String blockedFrom): returns true if there is an entry for blockedFrom, blocked
	gov.nist.sip.db.BlockDB.BlockingService:
		boolean checkIfBlock(Request request): checks the incoming request and returns true if the caller has been blocked by the callee.
	gov.nist.sip.proxy.Proxy.java:
		if blocked: creates response BUSY
	
	Sip Communicator's side:
	net.java.sip.communicator.gui.PhoneFrame.java:
		puts the blocking button on the phone frame
	net.java.sip.communicator.gui.GuiManager.java:	
		blockButton_actionPerformed: 
			show blocking splash
			handleGetBlockList()
			handleNewBlockList()
	net.java.sip.communicator.gui.event.UserActionListener:	
		void handleGetBlockList()
		void handleNewBlockList() these are implemented on SipCommunicator.java
	net.java.sip.communicator.SipCommunicator.java:	
		handleGetBlockList():
			blockDB.getBlocks() in order to show to the user who he has blocked
		handleNewBlockList():
			blockClient.blockUser(fromUser, toUser);
			blockClient.unblockUser(fromUser, toUser);
	net.java.sip.communicator.gui.BlockSplash.java:
		sets the toUser string entered by the user on the block window.
	net.java.sip.communicator.forwarding.BlockClient.java: 
		responsible for calling the BlockDB's functions.	
	net.java.sip.communicator.db.BlockDB.java:
		getBlocks(): Returns formatted string with blocked users.
		unblockUser(): delete the entry from the database
		blockUser(String fromUser, String toUser):
			checks if the toUser exists on the database and throws NoSuchElementException in case no such user found
			if already blocked then do nothing
			else insert into the blocking database
			
	
Call history:
		Add "Calls" button at phoneFrame
		Activate this button at GuiManager and call from there the CallsSplash constructor
		At calls splash use billingDB to return a string with the user's call history

	
	
	
	
	
	